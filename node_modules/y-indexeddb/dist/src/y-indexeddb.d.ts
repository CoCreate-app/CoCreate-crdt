export const PREFERRED_TRIM_SIZE: 500;
export function fetchUpdates(idbPersistence: IndexeddbPersistence): Promise<IDBObjectStore>;
export function storeState(idbPersistence: IndexeddbPersistence, forceStore?: boolean): Promise<void>;
export function clearDocument(name: string): Promise<any>;
/**
 * @extends Observable<string>
 */
export class IndexeddbPersistence extends Observable<string> {
    /**
     * @param {string} name
     * @param {Y.Doc} doc
     */
    constructor(name: string, doc: Y.Doc);
    doc: Y.Doc;
    name: string;
    _mux: mutex.mutex;
    _dbref: number;
    _dbsize: number;
    /**
     * @type {IDBDatabase|null}
     */
    db: IDBDatabase | null;
    synced: boolean;
    _db: Promise<IDBDatabase>;
    /**
     * @type {Promise<IndexeddbPersistence>}
     */
    whenSynced: Promise<IndexeddbPersistence>;
    /**
     * Timeout in ms untill data is merged and persisted in idb.
     */
    _storeTimeout: number;
    /**
     * @type {any}
     */
    _storeTimeoutId: any;
    /**
     * @param {Uint8Array} update
     */
    _storeUpdate: (update: Uint8Array) => any;
    destroy(): Promise<void>;
    /**
     * Destroys this instance and removes all data from indexeddb.
     */
    clearData(): void;
    /**
     * @param {String | number | ArrayBuffer | Date} key
     * @return {Promise<String | number | ArrayBuffer | Date | any>}
     */
    get(key: string | number | Date | ArrayBuffer): Promise<any>;
    /**
     * @param {String | number | ArrayBuffer | Date} key
     * @param {String | number | ArrayBuffer | Date} value
     * @return {Promise<String | number | ArrayBuffer | Date>}
     */
    set(key: string | number | Date | ArrayBuffer, value: string | number | Date | ArrayBuffer): Promise<string | number | Date | ArrayBuffer>;
    /**
     * @param {String | number | ArrayBuffer | Date} key
     * @return {Promise<undefined>}
     */
    del(key: string | number | Date | ArrayBuffer): Promise<undefined>;
}
import { Observable } from "lib0/observable";
import * as Y from "yjs";
import * as mutex from "lib0/mutex";
//# sourceMappingURL=y-indexeddb.d.ts.map